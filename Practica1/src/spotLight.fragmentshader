#version 330 core

struct Light {
    vec3 position;
	vec3 direction;

	float cutOff;
    float outerCutOff;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;

	float constant;
    float linear;
    float quadratic;
};

out vec4 color;

in vec3 fragPos;  
in vec3 norm;  
  
//uniform vec3 lightPos; 

uniform vec3 viewPos;
uniform vec3 lightColor;
uniform vec3 objectColor;
uniform Light light;

//uniform float ambStrength;
//uniform float specStrength;

void main()
{
    // Ambient
    vec3 ambient = light.ambient * lightColor;
  	
    // Diffuse 
    vec3 normal = normalize(norm);
    vec3 lightDir = normalize(light.position - fragPos);
    float diff = max(dot(normal, lightDir), 0.0);
    vec3 diffuse = light.diffuse * diff * lightColor;
    
    // Specular
    vec3 viewDir = normalize(viewPos - fragPos);
    vec3 reflectDir = reflect(-lightDir, normal);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = light.specular * spec * lightColor;  

	// Spotlight (soft edges)
    float theta = dot(lightDir, normalize(-light.direction)); 
    float epsilon = (light.cutOff - light.outerCutOff);
    float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);
    diffuse  *= intensity;
    specular *= intensity;
	
	// Attenuation
    float distance = length(light.position - fragPos);
    float attenuation = 1.0f / (light.constant + light.linear * distance + light.quadratic * (distance * distance));

	ambient  *= attenuation;  
    diffuse  *= attenuation;
    specular *= attenuation; 
        
    vec3 result = (ambient + diffuse + specular) * objectColor;
    color = vec4(result, 1.0f);
} 